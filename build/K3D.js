/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/K3D.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/K3D.js":
/*!********************!*\
  !*** ./src/K3D.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _js_geometry_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js/geometry.js */ \"./src/js/geometry.js\");\n/* harmony import */ var _js_material_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./js/material.js */ \"./src/js/material.js\");\n/* harmony import */ var _js_light_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./js/light.js */ \"./src/js/light.js\");\n/* harmony import */ var _js_camera_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./js/camera.js */ \"./src/js/camera.js\");\n/* harmony import */ var _js_mesh_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./js/mesh.js */ \"./src/js/mesh.js\");\n/* harmony import */ var _js_scene_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./js/scene.js */ \"./src/js/scene.js\");\n/* harmony import */ var _js_renderer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./js/renderer.js */ \"./src/js/renderer.js\");\n/* harmony import */ var _js_controls_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./js/controls.js */ \"./src/js/controls.js\");\n\n\n\n\n\n\n\n\nwindow.K3D = {\n  Triangle: _js_geometry_js__WEBPACK_IMPORTED_MODULE_0__[\"Triangle\"],\n  ConeGeometry: _js_geometry_js__WEBPACK_IMPORTED_MODULE_0__[\"ConeGeometry\"],\n  BoxGeometry: _js_geometry_js__WEBPACK_IMPORTED_MODULE_0__[\"BoxGeometry\"],\n  UVSphereGeometry: _js_geometry_js__WEBPACK_IMPORTED_MODULE_0__[\"UVSphereGeometry\"],\n  BasicMaterial: _js_material_js__WEBPACK_IMPORTED_MODULE_1__[\"BasicMaterial\"],\n  PointLight: _js_light_js__WEBPACK_IMPORTED_MODULE_2__[\"PointLight\"],\n  AmbientLight: _js_light_js__WEBPACK_IMPORTED_MODULE_2__[\"AmbientLight\"],\n  PerspectiveCamera: _js_camera_js__WEBPACK_IMPORTED_MODULE_3__[\"PerspectiveCamera\"],\n  Mesh: _js_mesh_js__WEBPACK_IMPORTED_MODULE_4__[\"Mesh\"],\n  Scene: _js_scene_js__WEBPACK_IMPORTED_MODULE_5__[\"Scene\"],\n  RenderEngine: _js_renderer_js__WEBPACK_IMPORTED_MODULE_6__[\"RenderEngine\"],\n  EasyCam: _js_controls_js__WEBPACK_IMPORTED_MODULE_7__[\"EasyCam\"],\n  OrbitControl: _js_controls_js__WEBPACK_IMPORTED_MODULE_7__[\"OrbitControl\"]\n};\nwindow.SHADE_FLAT = 74567;\nwindow.SHADE_SMOOTH = 36474; // Uniform types:\n\nwindow.UNIFORM_FVEC1 = 25483;\nwindow.UNIFORM_FVEC2 = 26323;\nwindow.UNIFORM_FVEC3 = 25123; // Vector 3 float\n\nwindow.UNIFORM_FVEC4 = 15113; // Vector 4 float\n\nwindow.UNIFORM_FMATX4 = 65103; //\n\nwindow.UNIFORM_INT = 55793;\nwindow.UNIFORM_FLOAT = 25383;\n\n//# sourceURL=webpack:///./src/K3D.js?");

/***/ }),

/***/ "./src/js/camera.js":
/*!**************************!*\
  !*** ./src/js/camera.js ***!
  \**************************/
/*! exports provided: PerspectiveCamera */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PerspectiveCamera\", function() { return PerspectiveCamera; });\n/* harmony import */ var _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./matrix_math.js */ \"./src/js/matrix_math.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar PerspectiveCamera = /*#__PURE__*/function () {\n  function PerspectiveCamera(fov, asp, near, far) {\n    _classCallCheck(this, PerspectiveCamera);\n\n    this.eye = {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n    this.u = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].create(1, 0, 0);\n    this.v = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].create(0, 1, 0);\n    this.n = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].create(0, 0, 1);\n    this.t = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].create();\n    this.transform = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].create();\n    this.projection = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].createPerspective(fov, asp, near, far);\n    this.lookAt(0, 0, 0);\n  }\n\n  _createClass(PerspectiveCamera, [{\n    key: \"lookAt\",\n    value: function lookAt(center_x, center_y, center_z) {\n      var center = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].create(center_x, center_y, center_z);\n      var eye = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].create(this.eye.x, this.eye.y, this.eye.z);\n      var up = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].create(0, 1, 0);\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].subtract(this.n, eye, center);\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].normalize(this.n);\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].crossProduct(this.u, up, this.n);\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].normalize(this.u);\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].crossProduct(this.v, this.n, this.u);\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].normalize(this.v);\n      this.t[0] = -_matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].dotProduct(this.u, eye);\n      this.t[1] = -_matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].dotProduct(this.v, eye);\n      this.t[2] = -_matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].dotProduct(this.n, eye); // Set the camera matrix:\n\n      this.updateTransform();\n    }\n    /** @truck\r\n    * Move the camera along the u-axis:\r\n    * @param distance the distance to move\r\n    * @private\r\n    */\n\n  }, {\n    key: \"truck\",\n    value: function truck(distance) {\n      var eye = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].create(this.eye.x, this.eye.y, this.eye.z);\n      var u_scale = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].create();\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].scale(u_scale, this.u, distance);\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].add(eye, eye, u_scale);\n      this.eye.x = eye[0];\n      this.eye.y = eye[1];\n      this.eye.z = eye[2];\n      this.t[0] = -_matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].dotProduct(this.u, eye);\n      this.t[1] = -_matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].dotProduct(this.v, eye);\n      this.t[2] = -_matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].dotProduct(this.n, eye);\n      this.updateTransform();\n    }\n    /** @pan\r\n    * Rotate the camera around the v-axis:\r\n    * @param angle the distance to move\r\n    * @private\r\n    */\n\n  }, {\n    key: \"pan\",\n    value: function pan(angle) {\n      var eye = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].create(this.eye.x, this.eye.y, this.eye.z);\n      var rotate = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].create();\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].rotate(rotate, angle, this.v[0], this.v[1], this.v[2]);\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].multiplyV3(this.u, rotate, this.u);\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].multiplyV3(this.n, rotate, this.n); // Update the translate values of ty and tz\n\n      this.t[0] = -_matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].dotProduct(this.u, eye);\n      this.t[2] = -_matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].dotProduct(this.n, eye);\n      this.updateTransform();\n    }\n    /** @tilt\r\n    * Rotate the camera around the u-axis:\r\n    * @param angle the distance to move\r\n    * @private\r\n    */\n\n  }, {\n    key: \"tilt\",\n    value: function tilt(angle) {\n      var eye = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].create(this.eye.x, this.eye.y, this.eye.z);\n      var rotate = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].create();\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].rotate(rotate, angle, this.u[0], this.u[1], this.u[2]);\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].multiplyV3(this.v, rotate, this.v);\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].multiplyV3(this.n, rotate, this.n); // Update the translate values of ty and tz\n\n      this.t[1] = -_matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].dotProduct(this.v, eye);\n      this.t[2] = -_matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].dotProduct(this.n, eye);\n      this.updateTransform();\n    }\n  }, {\n    key: \"dolly\",\n    value: function dolly(distance) {\n      var eye = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].create(this.eye.x, this.eye.y, this.eye.z);\n      var n_scale = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].create();\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].scale(n_scale, this.n, distance);\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].add(eye, eye, n_scale);\n      this.eye.x = eye[0];\n      this.eye.y = eye[1];\n      this.eye.z = eye[2];\n      this.t[0] = -_matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].dotProduct(this.u, eye);\n      this.t[1] = -_matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].dotProduct(this.v, eye);\n      this.t[2] = -_matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].dotProduct(this.n, eye);\n      this.updateTransform();\n    }\n  }, {\n    key: \"updateTransform\",\n    value: function updateTransform() {\n      this.transform[0] = this.u[0];\n      this.transform[4] = this.u[1];\n      this.transform[8] = this.u[2];\n      this.transform[12] = this.t[0];\n      this.transform[1] = this.v[0];\n      this.transform[5] = this.v[1];\n      this.transform[9] = this.v[2];\n      this.transform[13] = this.t[1];\n      this.transform[2] = this.n[0];\n      this.transform[6] = this.n[1];\n      this.transform[10] = this.n[2];\n      this.transform[14] = this.t[2];\n      this.transform[3] = 0;\n      this.transform[7] = 0;\n      this.transform[11] = 0;\n      this.transform[15] = 1;\n    }\n  }]);\n\n  return PerspectiveCamera;\n}();\n\n//# sourceURL=webpack:///./src/js/camera.js?");

/***/ }),

/***/ "./src/js/controls.js":
/*!****************************!*\
  !*** ./src/js/controls.js ***!
  \****************************/
/*! exports provided: EasyCam, OrbitControl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EasyCam\", function() { return EasyCam; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OrbitControl\", function() { return OrbitControl; });\n/* harmony import */ var _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./matrix_math.js */ \"./src/js/matrix_math.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar x = 0;\nvar y = 0;\nvar is_press = false;\nvar deltaX, deltaY;\nvar EasyCam = /*#__PURE__*/function () {\n  function EasyCam(canvas, camera) {\n    _classCallCheck(this, EasyCam);\n\n    this.canvas = canvas;\n    this.camera = camera;\n  }\n\n  _createClass(EasyCam, [{\n    key: \"initEvent\",\n    value: function initEvent() {\n      var _this = this;\n\n      this.canvas.addEventListener(\"wheel\", function (e) {\n        e.preventDefault();\n\n        _this.camera.dolly(event.deltaY * 0.005);\n      });\n      this.canvas.addEventListener(\"mousedown\", function (e) {\n        e.preventDefault();\n        x = e.clientX;\n        y = e.clientY;\n        is_press = true;\n      });\n      this.canvas.addEventListener(\"mousemove\", function (e) {\n        e.preventDefault();\n\n        if (is_press == true) {\n          deltaX = e.clientX - x;\n          deltaY = e.clientY - y;\n\n          _this.camera.pan(deltaX * 0.05);\n\n          _this.camera.tilt(deltaY * 0.05);\n\n          x = e.clientX;\n          y = e.clientY;\n        }\n      });\n      this.canvas.addEventListener(\"mouseup\", function (e) {\n        e.preventDefault();\n        is_press = false;\n      });\n    }\n  }]);\n\n  return EasyCam;\n}();\nvar OrbitControl = /*#__PURE__*/function () {\n  function OrbitControl(canvas, camera) {\n    _classCallCheck(this, OrbitControl);\n\n    this.canvas = canvas;\n    this.camera = camera;\n    this.theta = 0;\n    this.phi = 0;\n    this.center = {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n    this.radius = 0;\n    this.updateCoordinate();\n  }\n\n  _createClass(OrbitControl, [{\n    key: \"initEvent\",\n    value: function initEvent() {\n      var _this2 = this;\n\n      this.canvas.addEventListener(\"mousedown\", function (e) {\n        e.preventDefault();\n        is_press = true;\n        x = e.clientX;\n        y = e.clientY;\n      }, false);\n      this.canvas.addEventListener(\"mousemove\", function (e) {\n        e.preventDefault();\n\n        if (is_press === true) {\n          var _deltaX = (e.clientX - x) * 0.005;\n\n          var _deltaY = (e.clientY - y) * 0.005;\n\n          _this2.phi += _deltaY;\n          _this2.theta += _deltaX;\n          _this2.camera.eye.x = _this2.radius * Math.sin(_this2.phi) * Math.cos(_this2.theta);\n          _this2.camera.eye.y = _this2.radius * Math.sin(_this2.phi) * Math.sin(_this2.theta);\n          _this2.camera.eye.z = _this2.radius * Math.cos(_this2.phi);\n\n          _this2.camera.lookAt(_this2.center.x, _this2.center.y, _this2.center.z);\n\n          x = e.clientX;\n          y = e.clientY;\n        }\n      }, false);\n      this.canvas.addEventListener(\"mouseup\", function (e) {\n        is_press = false;\n      }, false);\n      this.canvas.addEventListener(\"wheel\", function (e) {\n        e.preventDefault();\n\n        _this2.camera.dolly(event.deltaY * 0.005);\n\n        _this2.updateCoordinate();\n      }, false);\n    }\n  }, {\n    key: \"updateCoordinate\",\n    value: function updateCoordinate() {\n      var eye = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].create(this.camera.eye.x, this.camera.eye.x, this.camera.eye.z);\n      var center = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].create(this.center.x, this.center.y, this.center.z);\n      var r = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].create();\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].subtract(r, eye, center);\n      this.radius = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].length(r);\n      this.theta = Math.acos(eye[2] / this.radius);\n      this.phi = Math.asin(eye[0] / this.radius * Math.cos(this.theta));\n    }\n  }]);\n\n  return OrbitControl;\n}();\n\n//# sourceURL=webpack:///./src/js/controls.js?");

/***/ }),

/***/ "./src/js/geometry.js":
/*!****************************!*\
  !*** ./src/js/geometry.js ***!
  \****************************/
/*! exports provided: Triangle, ConeGeometry, BoxGeometry, UVSphereGeometry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Triangle\", function() { return Triangle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConeGeometry\", function() { return ConeGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BoxGeometry\", function() { return BoxGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UVSphereGeometry\", function() { return UVSphereGeometry; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./src/js/utils.js\");\n/* harmony import */ var _matrix_math_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./matrix_math.js */ \"./src/js/matrix_math.js\");\n\n\nvar Triangle = function Triangle(v0, v1, v2) {\n  var v = [];\n  var triangles = [];\n  var lines = [];\n  triangles = [[v0, v1, v2]];\n\n  for (var i = 0; i < triangles.length; i++) {\n    var l1 = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createTriangle\"])(triangles[i][0], triangles[i][1]);\n    var l2 = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createLine\"])(triangles[i][1], triangles[i][2]);\n    var l3 = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createLine\"])(triangles[i][2], triangles[i][0]);\n    lines.push(l1);\n    lines.push(l2);\n    lines.push(l3);\n  }\n\n  var smooth_normals = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"buildSmoothNormal\"])(triangles); // Normal vector array of every vertices in each triangle.\n\n  var flat_normals = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"buildFlatNormal\"])(triangles); // Normal vector array of each triangle.\n\n  return {\n    type: \"Triangle\",\n    points: [v0, v1, v2],\n    triangles: triangles,\n    lines: lines,\n    smooth_normals: smooth_normals,\n    flat_normals: flat_normals\n  };\n};\nvar ConeGeometry = function ConeGeometry(radius, height, segments) {\n  var v = [];\n  var triangles = [];\n  var lines = [];\n  var angle_step = 2 * Math.PI / segments;\n  var x, y, angle;\n\n  for (var _i = 0; _i <= segments; _i++) {\n    angle = _i * angle_step;\n    x = radius * Math.cos(angle);\n    y = radius * Math.sin(angle);\n    v.push([x, y, 0]);\n  }\n\n  for (var _i2 = 0; _i2 < segments; _i2++) {\n    var peak = [0, 0, height];\n    var bottom = [0, 0, 0];\n    var side_planes = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createTriangle\"])(peak, v[_i2], v[_i2 + 1]);\n    var bottom_planes = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createTriangle\"])(v[_i2], bottom, v[_i2 + 1]);\n    triangles.push(side_planes);\n    triangles.push(bottom_planes);\n  }\n\n  for (var _i3 = 0; _i3 < triangles.length; _i3++) {\n    var l1 = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createLine\"])(triangles[_i3][0], triangles[_i3][1]);\n    var l2 = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createLine\"])(triangles[_i3][1], triangles[_i3][2]);\n    var l3 = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createLine\"])(triangles[_i3][2], triangles[_i3][0]);\n    lines.push(l1);\n    lines.push(l2);\n    lines.push(l3);\n  } // Merge vertices by distance:\n\n\n  var count = 0;\n  var done = true;\n  var i = 0;\n\n  for (i; i < v.length; i++) {\n    for (var j = i + 1; j < v.length; j++) {\n      var p1 = _matrix_math_js__WEBPACK_IMPORTED_MODULE_1__[\"point4\"].create(v[i][0], v[i][1], v[i][2]);\n      var p2 = _matrix_math_js__WEBPACK_IMPORTED_MODULE_1__[\"point4\"].create(v[j][0], v[j][1], v[j][2]);\n      var distanceBetween = _matrix_math_js__WEBPACK_IMPORTED_MODULE_1__[\"point4\"].distanceBetween(p1, p2);\n\n      if (distanceBetween < 0.00001) {\n        v[i] = v[j];\n        v.splice(j, 1);\n        i = 0;\n        break;\n      }\n    }\n  } // Add the peak vertex and origin vertex - no needed order for points rendering:\n\n\n  v.push([0, 0, 0]);\n  v.push([0, 0, height]); // Build normal data for flat shading:\n\n  var smooth_normals = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"buildSmoothNormal\"])(triangles); // Normal vector array of every vertices in each triangle.\n\n  var flat_normals = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"buildFlatNormal\"])(triangles); // Normal vector array of each triangle.\n\n  return {\n    type: \"ConeGeometry\",\n    points: v,\n    triangles: triangles,\n    lines: lines,\n    flat_normals: flat_normals,\n    smooth_normals: smooth_normals\n  };\n};\nvar BoxGeometry = function BoxGeometry(width, height, depth) {\n  var w, h, d;\n  var v = null;\n  var triangles = [];\n  var lines = [];\n  w = width;\n\n  if (height != null) {\n    h = height;\n  } else {\n    h = w;\n  }\n\n  if (depth != null) {\n    d = depth;\n  } else {\n    d = w;\n  }\n\n  v = [[-w / 2, h / 2, d / 2], [-w / 2, -h / 2, d / 2], [w / 2, h / 2, d / 2], [w / 2, -h / 2, d / 2], [w / 2, h / 2, -d / 2], [w / 2, -h / 2, -d / 2], [-w / 2, h / 2, -d / 2], [-w / 2, -h / 2, -d / 2]];\n  triangles = [Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createTriangle\"])(v[0], v[1], v[2]), Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createTriangle\"])(v[2], v[1], v[3]), Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createTriangle\"])(v[2], v[3], v[4]), Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createTriangle\"])(v[4], v[3], v[5]), Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createTriangle\"])(v[4], v[5], v[6]), Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createTriangle\"])(v[6], v[5], v[7]), Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createTriangle\"])(v[6], v[7], v[0]), Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createTriangle\"])(v[0], v[7], v[1]), Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createTriangle\"])(v[0], v[2], v[6]), Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createTriangle\"])(v[6], v[2], v[4]), Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createTriangle\"])(v[1], v[7], v[3]), Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createTriangle\"])(v[3], v[7], v[5])];\n\n  for (var i = 0; i < triangles.length; i++) {\n    var l1 = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createLine\"])(triangles[i][0], triangles[i][1]);\n    var l2 = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createLine\"])(triangles[i][1], triangles[i][2]);\n    var l3 = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createLine\"])(triangles[i][2], triangles[i][0]);\n    lines.push(l1);\n    lines.push(l2);\n    lines.push(l3);\n  } // Build normal data for flat shading:\n\n\n  var smooth_normals = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"buildSmoothNormal\"])(triangles); // Normal vector array of every vertices in each triangle.\n\n  var flat_normals = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"buildFlatNormal\"])(triangles); // Normal vector array of each triangle.\n\n  return {\n    type: \"BoxGeometry\",\n    points: v,\n    triangles: triangles,\n    lines: lines,\n    flat_normals: flat_normals,\n    smooth_normals: smooth_normals\n  };\n};\nvar UVSphereGeometry = function UVSphereGeometry(size, rings, segments) {\n  var vertices = [];\n  var triangles = [];\n  var lines = [];\n  var x, y, z, xy;\n  var lat, lon;\n  var lat_step = Math.PI / rings;\n  var lon_step = 2 * Math.PI / segments; // Build spherical geometry vertices:\n\n  for (var _i4 = 0; _i4 <= rings; _i4++) {\n    lat = Math.PI / 2 - _i4 * lat_step;\n    xy = size * Math.cos(lat);\n    z = size * Math.sin(lat);\n\n    for (var j = 0; j < segments; j++) {\n      lon = j * lon_step;\n      x = xy * Math.cos(lon);\n      y = xy * Math.sin(lon);\n      vertices.push([x, y, z]);\n    }\n  } // Build triangles from vertices:\n\n\n  var k1, k2;\n\n  for (var _i5 = 0; _i5 < rings; _i5++) {\n    k1 = _i5 * segments;\n    k2 = k1 + segments;\n\n    for (var _j = 0; _j < segments; _j++, k1++, k2++) {\n      if (_i5 != 0) {\n        var t = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createTriangle\"])(vertices[k1], vertices[k2], vertices[k1 + 1]);\n        triangles.push(t);\n      }\n\n      if (_i5 != rings - 1) {\n        var _t = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createTriangle\"])(vertices[k1 + 1], vertices[k2], vertices[k2 + 1]);\n\n        triangles.push(_t);\n      }\n    }\n  } // Build lines from triangles:\n\n\n  for (var _i6 = 0; _i6 < triangles.length; _i6++) {\n    var l1 = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createLine\"])(triangles[_i6][0], triangles[_i6][1]);\n    var l2 = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createLine\"])(triangles[_i6][1], triangles[_i6][2]);\n    var l3 = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"createLine\"])(triangles[_i6][2], triangles[_i6][0]);\n    lines.push(l1);\n    lines.push(l2);\n    lines.push(l3);\n  } // Merge vertices by distance:\n\n\n  var count = 0;\n  var done = true;\n  var i = 0;\n\n  for (i; i < vertices.length; i++) {\n    for (var _j2 = i + 1; _j2 < vertices.length; _j2++) {\n      var p1 = _matrix_math_js__WEBPACK_IMPORTED_MODULE_1__[\"point4\"].create(vertices[i][0], vertices[i][1], vertices[i][2]);\n      var p2 = _matrix_math_js__WEBPACK_IMPORTED_MODULE_1__[\"point4\"].create(vertices[_j2][0], vertices[_j2][1], vertices[_j2][2]);\n      var distanceBetween = _matrix_math_js__WEBPACK_IMPORTED_MODULE_1__[\"point4\"].distanceBetween(p1, p2);\n\n      if (distanceBetween < 0.00001) {\n        vertices[i] = vertices[_j2];\n        vertices.splice(_j2, 1);\n        i = 0;\n        break;\n      }\n    }\n  }\n\n  vertices.splice(0, 1); // Build normal data for flat shading:\n\n  var smooth_normals = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"buildSmoothNormal\"])(triangles); // Normal vector array of every vertices in each triangle.\n\n  var flat_normals = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"buildFlatNormal\"])(triangles); // Normal vector array of each triangle.\n\n  return {\n    type: \"SphereGeometry\",\n    points: vertices,\n    triangles: triangles,\n    lines: lines,\n    origin: [0, 0, 0],\n    smooth_normals: smooth_normals,\n    flat_normals: flat_normals\n  };\n};\n\n//# sourceURL=webpack:///./src/js/geometry.js?");

/***/ }),

/***/ "./src/js/light.js":
/*!*************************!*\
  !*** ./src/js/light.js ***!
  \*************************/
/*! exports provided: PointLight, AmbientLight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointLight\", function() { return PointLight; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AmbientLight\", function() { return AmbientLight; });\nvar PointLight = function PointLight(x, y, z, color) {\n  return {\n    type: \"PointLight\",\n    position: {\n      x: x,\n      y: y,\n      z: z\n    },\n    color: color,\n    intensity: 1.\n  };\n};\nvar AmbientLight = function AmbientLight(r, g, b) {\n  return {\n    type: \"AmbientLight\",\n    color: {\n      r: r,\n      g: g,\n      b: b\n    },\n    intensity: .2\n  };\n};\n\n//# sourceURL=webpack:///./src/js/light.js?");

/***/ }),

/***/ "./src/js/material.js":
/*!****************************!*\
  !*** ./src/js/material.js ***!
  \****************************/
/*! exports provided: BasicMaterial */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BasicMaterial\", function() { return BasicMaterial; });\nvar BasicMaterial = function BasicMaterial(r, g, b) {\n  var material = {\n    type: \"NormalMaterial\",\n    base_color: [r, g, b]\n  };\n  return material;\n};\n\n//# sourceURL=webpack:///./src/js/material.js?");

/***/ }),

/***/ "./src/js/matrix_math.js":
/*!*******************************!*\
  !*** ./src/js/matrix_math.js ***!
  \*******************************/
/*! exports provided: point4, vec3, mat4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"point4\", function() { return point4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"vec3\", function() { return vec3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mat4\", function() { return mat4; });\nfunction Point4() {\n  this.create = function (x, y, z, w) {\n    var p = new Float32Array(4);\n    p[0] = 0;\n    p[1] = 0;\n    p[2] = 0;\n    p[3] = 1;\n    if (arguments.length >= 1) p[0] = x;\n    if (arguments.length >= 2) p[1] = y;\n    if (arguments.length >= 3) p[2] = z;\n    if (arguments.length >= 4) p[3] = w;\n    return p;\n  };\n  /** ---------------------------------------------------------------------\r\n   * @return Float32Array A new 4-component point that has the same values as the input argument\r\n   */\n\n\n  this.createFrom = function (from) {\n    var p = new Float32Array(4);\n    p[0] = from[0];\n    p[1] = from[1];\n    p[2] = from[2];\n    p[3] = from[3];\n    return p;\n  };\n  /** ---------------------------------------------------------------------\r\n   * to = from (copy the 2nd argument point to the first argument)\r\n   */\n\n\n  this.copy = function (to, from) {\n    to[0] = from[0];\n    to[1] = from[1];\n    to[2] = from[2];\n    to[3] = from[3];\n  };\n  /** ---------------------------------------------------------------------\r\n   * @return Number The distance between 2 points\r\n   */\n\n\n  this.distanceBetween = function (p1, p2) {\n    var dx = p1[0] - p2[0];\n    var dy = p1[1] - p2[1];\n    var dz = p1[2] - p2[2];\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\n  };\n  /** ---------------------------------------------------------------------\r\n   * Normalize the point by dividing by its homogeneous coordinate w\r\n   */\n\n\n  this.normalize = function (p) {\n    if (p[3] !== 0) {\n      p[0] = p[0] / p[3];\n      p[1] = p[1] / p[3];\n      p[2] = p[2] / p[3];\n      p[3] = 1;\n    }\n  };\n  /** ---------------------------------------------------------------------\r\n   * Print the vector on the console.\r\n   */\n\n\n  this.print = function (name, p) {\n    var maximum = Math.max(p[0], p[1], p[2], p[3]);\n    var order = Math.floor(Math.log(maximum) / Math.LN10 + 0.000000001);\n    var digits = order <= 0 ? 5 : order > 5 ? 0 : 5 - order;\n    console.log(\"Point4: \" + name + \": \" + p[0].toFixed(digits) + \" \" + p[1].toFixed(digits) + \" \" + p[2].toFixed(digits) + \" \" + p[3].toFixed(digits));\n  };\n}\n\nfunction Vector3() {\n  /** ---------------------------------------------------------------------\r\n  * Create a new 3-component vector.\r\n  * @param dx Number The change in x of the vector.\r\n  * @param dy Number The change in y of the vector.\r\n  * @param dz Number The change in z of the vector.\r\n  * @return Float32Array A new 3-component vector\r\n  */\n  this.create = function (dx, dy, dz) {\n    var v = new Float32Array(3);\n    v[0] = 0;\n    v[1] = 0;\n    v[2] = 0;\n\n    if (arguments.length >= 1) {\n      v[0] = dx;\n    }\n\n    if (arguments.length >= 2) {\n      v[1] = dy;\n    }\n\n    if (arguments.length >= 3) {\n      v[2] = dz;\n    }\n\n    return v;\n  };\n  /** ---------------------------------------------------------------------\r\n   * Create a new 3-component vector and set its components equal to an existing vector.\r\n   * @param from Float32Array An existing vector.\r\n   * @return Float32Array A new 3-component vector with the same values as \"from\"\r\n   */\n\n\n  this.createFrom = function (from) {\n    var v = new Float32Array(3);\n    v[0] = from[0];\n    v[1] = from[1];\n    v[2] = from[2];\n    return v;\n  };\n  /** ---------------------------------------------------------------------\r\n   * Create a vector using two existing points.\r\n   * @param tail Float32Array A 3-component point.\r\n   * @param head Float32Array A 3-component point.\r\n   * @return Float32Array A new 3-component vector defined by 2 points\r\n   */\n\n\n  this.createFrom2Points = function (tail, head) {\n    var v = new Float32Array(3);\n    this.subtract(v, head, tail);\n    return v;\n  };\n  /** ---------------------------------------------------------------------\r\n   * Copy a 3-component vector into another 3-component vector\r\n   * @param to Float32Array A 3-component vector that you want changed.\r\n   * @param from Float32Array A 3-component vector that is the source of data\r\n   * @returns Float32Array The \"to\" 3-component vector\r\n   */\n\n\n  this.copy = function (to, from) {\n    to[0] = from[0];\n    to[1] = from[1];\n    to[2] = from[2];\n    return to;\n  };\n  /** ---------------------------------------------------------------------\r\n   * Set the components of a 3-component vector.\r\n   * @param v Float32Array The vector to change.\r\n   * @param dx Number The change in x of the vector.\r\n   * @param dy Number The change in y of the vector.\r\n   * @param dz Number The change in z of the vector.\r\n   */\n\n\n  this.set = function (v, dx, dy, dz) {\n    v[0] = dx;\n    v[1] = dy;\n    v[2] = dz;\n  };\n  /** ---------------------------------------------------------------------\r\n   * Calculate the length of a vector.\r\n   * @param v Float32Array A 3-component vector.\r\n   * @return Number The length of a vector\r\n   */\n\n\n  this.length = function (v) {\n    return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n  };\n  /** ---------------------------------------------------------------------\r\n   * Make a vector have a length of 1.\r\n   * @param v Float32Array A 3-component vector.\r\n   * @return Float32Array The input vector normalized to unit length. Or null if the vector is zero length.\r\n   */\n\n\n  this.normalize = function (v) {\n    var length, percent;\n    length = this.length(v);\n\n    if (Math.abs(length) < 0.0000001) {\n      return null; // Invalid vector\n    }\n\n    percent = 1.0 / length;\n    v[0] = v[0] * percent;\n    v[1] = v[1] * percent;\n    v[2] = v[2] * percent;\n    return v;\n  };\n  /** ---------------------------------------------------------------------\r\n   * Add two vectors:  result = V0 + v1\r\n   * @param result Float32Array A 3-component vector.\r\n   * @param v0 Float32Array A 3-component vector.\r\n   * @param v1 Float32Array A 3-component vector.\r\n   */\n\n\n  this.add = function (result, v0, v1) {\n    result[0] = v0[0] + v1[0];\n    result[1] = v0[1] + v1[1];\n    result[2] = v0[2] + v1[2];\n  };\n  /** ---------------------------------------------------------------------\r\n   * Subtract two vectors:  result = v0 - v1\r\n   * @param result Float32Array A 3-component vector.\r\n   * @param v0 Float32Array A 3-component vector.\r\n   * @param v1 Float32Array A 3-component vector.\r\n   */\n\n\n  this.subtract = function (result, v0, v1) {\n    result[0] = v0[0] - v1[0];\n    result[1] = v0[1] - v1[1];\n    result[2] = v0[2] - v1[2];\n  };\n  /** ---------------------------------------------------------------------\r\n   * Scale a vector:  result = s * v0\r\n   * @param result Float32Array A 3-component vector.\r\n   * @param v0 Float32Array A 3-component vector.\r\n   * @param s Number A scale factor.\r\n   */\n\n\n  this.scale = function (result, v0, s) {\n    result[0] = v0[0] * s;\n    result[1] = v0[1] * s;\n    result[2] = v0[2] * s;\n  };\n  /** ---------------------------------------------------------------------\r\n   * Calculate the cross product of 2 vectors: result = v0 x v1 (order matters)\r\n   * @param result Float32Array A 3-component vector.\r\n   * @param v0 Float32Array A 3-component vector.\r\n   * @param v1 Float32Array A 3-component vector.\r\n   */\n\n\n  this.crossProduct = function (result, v0, v1) {\n    result[0] = v0[1] * v1[2] - v0[2] * v1[1];\n    result[1] = v0[2] * v1[0] - v0[0] * v1[2];\n    result[2] = v0[0] * v1[1] - v0[1] * v1[0];\n  };\n  /** ---------------------------------------------------------------------\r\n   * Calculate the dot product of 2 vectors\r\n   * @param v0 Float32Array A 3-component vector.\r\n   * @param v1 Float32Array A 3-component vector.\r\n   * @return Number Float32Array The dot product of v0 and v1\r\n   */\n\n\n  this.dotProduct = function (v0, v1) {\n    return v0[0] * v1[0] + v0[1] * v1[1] + v0[2] * v1[2];\n  };\n  /** ---------------------------------------------------------------------\r\n   * Print a vector on the console.\r\n   * @param name String A description of the vector to be printed.\r\n   * @param v Float32Array A 3-component vector.\r\n   */\n\n\n  this.print = function (name, v) {\n    var maximum, order, digits;\n    maximum = Math.max(v[0], v[1], v[2]);\n    order = Math.floor(Math.log(maximum) / Math.LN10 + 0.000000001);\n    digits = order <= 0 ? 5 : order > 5 ? 0 : 5 - order;\n    console.log(\"Vector3: \" + name + \": \" + v[0].toFixed(digits) + \" \" + v[1].toFixed(digits) + \" \" + v[2].toFixed(digits));\n  };\n}\n\nfunction Matrix4() {\n  /** -----------------------------------------------------------------\r\n  * @return Float32Array returns an uninitialized matrix.\r\n  */\n  this.create = function () {\n    return new Float32Array(16);\n  }; // Temporary matrices and vectors for calculations. They are reused to\n  // prevent new objects from being constantly re-created and then garbage\n  // collected.\n\n\n  var T1, T2, V, v3, P, p4, axis_of_rotation, u, v, n, center, eye, up;\n  T1 = this.create();\n  T2 = this.create();\n  V = new Vector3();\n  v3 = V.create();\n  P = new Point4();\n  p4 = P.create();\n  axis_of_rotation = V.create();\n  u = V.create();\n  v = V.create();\n  n = V.create();\n  center = V.create();\n  eye = V.create();\n  up = V.create();\n  /** -----------------------------------------------------------------\r\n   * M = I (identity Matrix)\r\n   */\n\n  this.setIdentity = function (M) {\n    M[0] = 1;\n    M[4] = 0;\n    M[8] = 0;\n    M[12] = 0;\n    M[1] = 0;\n    M[5] = 1;\n    M[9] = 0;\n    M[13] = 0;\n    M[2] = 0;\n    M[6] = 0;\n    M[10] = 1;\n    M[14] = 0;\n    M[3] = 0;\n    M[7] = 0;\n    M[11] = 0;\n    M[15] = 1;\n  };\n  /** -----------------------------------------------------------------\r\n   * @return number Convert the input angle in degrees to radians\r\n   */\n\n\n  this.toRadians = function (angleInDegrees) {\n    return angleInDegrees * 0.017453292519943295; // Math.PI / 180\n  };\n  /** -----------------------------------------------------------------\r\n   * @return number Convert the input angle in radians to degrees\r\n   */\n\n\n  this.toDegrees = function (angleInRadians) {\n    return angleInRadians * 57.29577951308232; // 180 / Math.PI\n  };\n  /** -----------------------------------------------------------------\r\n   * To = From (an element-by-element copy)\r\n   * @return To (a 16 element Float32Array)\r\n   */\n\n\n  this.copy = function (To, From) {\n    var j;\n\n    for (j = 0; j < 16; j += 1) {\n      To[j] = From[j];\n    }\n\n    return To;\n  };\n  /** -----------------------------------------------------------------\r\n   * R = A * B (Matrix Multiplication); NOTE: order matters!\r\n   */\n\n\n  this.multiply = function (R, A, B) {\n    // A and B can't change during the operation.\n    // If R is the same as A and/or B, Make copies of A and B\n    // The comparison must use ==, not ===. We are comparing for identical\n    // objects, not if two objects might have the same values.\n    if (A == R) {\n      A = this.copy(T1, A);\n    }\n\n    if (B == R) {\n      B = this.copy(T2, B);\n    }\n\n    R[0] = A[0] * B[0] + A[4] * B[1] + A[8] * B[2] + A[12] * B[3];\n    R[1] = A[1] * B[0] + A[5] * B[1] + A[9] * B[2] + A[13] * B[3];\n    R[2] = A[2] * B[0] + A[6] * B[1] + A[10] * B[2] + A[14] * B[3];\n    R[3] = A[3] * B[0] + A[7] * B[1] + A[11] * B[2] + A[15] * B[3];\n    R[4] = A[0] * B[4] + A[4] * B[5] + A[8] * B[6] + A[12] * B[7];\n    R[5] = A[1] * B[4] + A[5] * B[5] + A[9] * B[6] + A[13] * B[7];\n    R[6] = A[2] * B[4] + A[6] * B[5] + A[10] * B[6] + A[14] * B[7];\n    R[7] = A[3] * B[4] + A[7] * B[5] + A[11] * B[6] + A[15] * B[7];\n    R[8] = A[0] * B[8] + A[4] * B[9] + A[8] * B[10] + A[12] * B[11];\n    R[9] = A[1] * B[8] + A[5] * B[9] + A[9] * B[10] + A[13] * B[11];\n    R[10] = A[2] * B[8] + A[6] * B[9] + A[10] * B[10] + A[14] * B[11];\n    R[11] = A[3] * B[8] + A[7] * B[9] + A[11] * B[10] + A[15] * B[11];\n    R[12] = A[0] * B[12] + A[4] * B[13] + A[8] * B[14] + A[12] * B[15];\n    R[13] = A[1] * B[12] + A[5] * B[13] + A[9] * B[14] + A[13] * B[15];\n    R[14] = A[2] * B[12] + A[6] * B[13] + A[10] * B[14] + A[14] * B[15];\n    R[15] = A[3] * B[12] + A[7] * B[13] + A[11] * B[14] + A[15] * B[15];\n  };\n  /** -----------------------------------------------------------------\r\n   * R = A * B * C * D ... (Matrix Multiplication); NOTE: order matters!\r\n   */\n\n\n  this.multiplySeries = function () {\n    if (arguments.length >= 3) {\n      this.multiply(arguments[0], arguments[1], arguments[2]);\n      var j;\n\n      for (j = 3; j < arguments.length; j += 1) {\n        this.multiply(arguments[0], arguments[0], arguments[j]);\n      }\n    }\n  };\n  /** -----------------------------------------------------------------\r\n   * r = M * v (M is a 4x4 matrix, v is a 3-component vector)\r\n   */\n\n\n  this.multiplyV3 = function (r, M, v) {\n    // v can't change during the operation. If r and v are the same, make a copy of v\n    if (r == v) {\n      v = V.copy(v3, v);\n    }\n\n    r[0] = M[0] * v[0] + M[4] * v[1] + M[8] * v[2];\n    r[1] = M[1] * v[0] + M[5] * v[1] + M[9] * v[2];\n    r[2] = M[2] * v[0] + M[6] * v[1] + M[10] * v[2];\n  };\n  /** -----------------------------------------------------------------\r\n   * r = M * p (M is a 4x4 matrix, p is a 4-component point)\r\n   */\n\n\n  this.multiplyP4 = function (r, M, p) {\n    // p can't change during the operation, so make a copy of p.\n    P.copy(p4, p);\n    r[0] = M[0] * p4[0] + M[4] * p4[1] + M[8] * p4[2] + M[12] * p4[3];\n    r[1] = M[1] * p4[0] + M[5] * p4[1] + M[9] * p4[2] + M[13] * p4[3];\n    r[2] = M[2] * p4[0] + M[6] * p4[1] + M[10] * p4[2] + M[14] * p4[3];\n    r[3] = M[3] * p4[0] + M[7] * p4[1] + M[11] * p4[2] + M[15] * p4[3];\n  };\n  /** -----------------------------------------------------------------\r\n   * Console.log(name, M)\r\n   */\n\n\n  this.print = function (name, M) {\n    var fieldSize = 11;\n    var numText;\n    var row, offset, rowText, number;\n    console.log(name + \":\");\n\n    for (row = 0; row < 4; row += 1) {\n      rowText = \"\";\n\n      for (offset = 0; offset < 16; offset += 4) {\n        number = Number(M[row + offset]);\n        numText = number.toFixed(4);\n        rowText += new Array(fieldSize - numText.length).join(\" \") + numText;\n      }\n\n      console.log(rowText);\n    }\n  };\n  /** -----------------------------------------------------------------\r\n   * M = M' (transpose the matrix)\r\n   */\n\n\n  this.transpose = function (M) {\n    var t; // The diagonal values don't move; 6 non-diagonal elements are swapped.\n\n    t = M[1];\n    M[1] = M[4];\n    M[4] = t;\n    t = M[2];\n    M[2] = M[8];\n    M[8] = t;\n    t = M[3];\n    M[3] = M[12];\n    M[12] = t;\n    t = M[6];\n    M[6] = M[9];\n    M[9] = t;\n    t = M[7];\n    M[7] = M[13];\n    M[13] = t;\n    t = M[11];\n    M[11] = M[14];\n    M[14] = t;\n  };\n  /** -----------------------------------------------------------------\r\n   * Inv = M(-1) (Inv is set to the inverse of M)\r\n   *\r\n   */\n\n\n  this.inverse = function (Inv, M) {\n    /* Structure of matrix\r\n               0   1   2   3\r\n        ______________\r\n     0 | 0   4   8  12\r\n     1 | 1   5   9  13\r\n     2 | 2   6  10  14\r\n     3 | 3   7  11  15\r\n    */\n    // Factored out common terms\n    var t9_14_13_10 = M[9] * M[14] - M[13] * M[10];\n    var t13_6_5_14 = M[13] * M[6] - M[5] * M[14];\n    var t5_10_9_6 = M[5] * M[10] - M[9] * M[6];\n    var t12_10_8_14 = M[12] * M[10] - M[8] * M[14];\n    var t4_14_12_6 = M[4] * M[14] - M[12] * M[6];\n    var t8_6_4_10 = M[8] * M[6] - M[4] * M[10];\n    var t8_13_12_9 = M[8] * M[13] - M[12] * M[9];\n    var t12_5_4_13 = M[12] * M[5] - M[4] * M[13];\n    var t4_9_8_5 = M[4] * M[9] - M[8] * M[5];\n    var t1_14_13_2 = M[1] * M[14] - M[13] * M[2];\n    var t9_2_1_10 = M[9] * M[2] - M[1] * M[10];\n    var t12_2_0_14 = M[12] * M[2] - M[0] * M[14];\n    var t0_10_8_2 = M[0] * M[10] - M[8] * M[2];\n    var t0_13_12_1 = M[0] * M[13] - M[12] * M[1];\n    var t8_1_0_9 = M[8] * M[1] - M[0] * M[9];\n    var t1_6_5_2 = M[1] * M[6] - M[5] * M[2];\n    var t4_2_0_6 = M[4] * M[2] - M[0] * M[6];\n    var t0_5_4_1 = M[0] * M[5] - M[4] * M[1];\n    Inv[0] = M[7] * t9_14_13_10 + M[11] * t13_6_5_14 + M[15] * t5_10_9_6;\n    Inv[4] = M[7] * t12_10_8_14 + M[11] * t4_14_12_6 + M[15] * t8_6_4_10;\n    Inv[8] = M[7] * t8_13_12_9 + M[11] * t12_5_4_13 + M[15] * t4_9_8_5;\n    Inv[12] = M[6] * -t8_13_12_9 + M[10] * -t12_5_4_13 + M[14] * -t4_9_8_5;\n    Inv[1] = M[3] * -t9_14_13_10 + M[11] * t1_14_13_2 + M[15] * t9_2_1_10;\n    Inv[5] = M[3] * -t12_10_8_14 + M[11] * t12_2_0_14 + M[15] * t0_10_8_2;\n    Inv[9] = M[3] * -t8_13_12_9 + M[11] * t0_13_12_1 + M[15] * t8_1_0_9;\n    Inv[13] = M[2] * t8_13_12_9 + M[10] * -t0_13_12_1 + M[14] * -t8_1_0_9;\n    Inv[2] = M[3] * -t13_6_5_14 + M[7] * -t1_14_13_2 + M[15] * t1_6_5_2;\n    Inv[6] = M[3] * -t4_14_12_6 + M[7] * -t12_2_0_14 + M[15] * t4_2_0_6;\n    Inv[10] = M[3] * -t12_5_4_13 + M[7] * -t0_13_12_1 + M[15] * t0_5_4_1;\n    Inv[14] = M[2] * t12_5_4_13 + M[6] * t0_13_12_1 + M[14] * -t0_5_4_1;\n    Inv[3] = M[3] * -t5_10_9_6 + M[7] * -t9_2_1_10 + M[11] * -t1_6_5_2;\n    Inv[7] = M[3] * -t8_6_4_10 + M[7] * -t0_10_8_2 + M[11] * -t4_2_0_6;\n    Inv[11] = M[3] * -t4_9_8_5 + M[7] * -t8_1_0_9 + M[11] * -t0_5_4_1;\n    Inv[15] = M[2] * t4_9_8_5 + M[6] * t8_1_0_9 + M[10] * t0_5_4_1;\n    var det;\n    det = M[3] * (M[6] * -t8_13_12_9 + M[10] * -t12_5_4_13 + M[14] * -t4_9_8_5) + M[7] * (M[2] * t8_13_12_9 + M[10] * -t0_13_12_1 + M[14] * -t8_1_0_9) + M[11] * (M[2] * t12_5_4_13 + M[6] * t0_13_12_1 + M[14] * -t0_5_4_1) + M[15] * (M[2] * t4_9_8_5 + M[6] * t8_1_0_9 + M[10] * t0_5_4_1);\n\n    if (det !== 0) {\n      var j;\n      var scale = 1 / det;\n\n      for (j = 0; j < 16; j += 1) {\n        Inv[j] = Inv[j] * scale;\n      }\n    }\n  };\n\n  this.scale = function (M, sx, sy, sz) {\n    M[0] = sx;\n    M[4] = 0;\n    M[8] = 0;\n    M[12] = 0;\n    M[1] = 0;\n    M[5] = sy;\n    M[9] = 0;\n    M[13] = 0;\n    M[2] = 0;\n    M[6] = 0;\n    M[10] = sz;\n    M[14] = 0;\n    M[3] = 0;\n    M[7] = 0;\n    M[11] = 0;\n    M[15] = 1;\n  };\n\n  this.translate = function (M, dx, dy, dz) {\n    M[0] = 1;\n    M[4] = 0;\n    M[8] = 0;\n    M[12] = dx;\n    M[1] = 0;\n    M[5] = 1;\n    M[9] = 0;\n    M[13] = dy;\n    M[2] = 0;\n    M[6] = 0;\n    M[10] = 1;\n    M[14] = dz;\n    M[3] = 0;\n    M[7] = 0;\n    M[11] = 0;\n    M[15] = 1;\n  };\n\n  this.rotate = function (M, angle, x_axis, y_axis, z_axis) {\n    var s, c, c1, xy, yz, zx, xs, ys, zs, ux, uy, uz;\n    angle = this.toRadians(angle);\n    s = Math.sin(angle);\n    c = Math.cos(angle);\n\n    if (x_axis !== 0 && y_axis === 0 && z_axis === 0) {\n      // Rotation around the X axis\n      if (x_axis < 0) {\n        s = -s;\n      }\n\n      M[0] = 1;\n      M[4] = 0;\n      M[8] = 0;\n      M[12] = 0;\n      M[1] = 0;\n      M[5] = c;\n      M[9] = -s;\n      M[13] = 0;\n      M[2] = 0;\n      M[6] = s;\n      M[10] = c;\n      M[14] = 0;\n      M[3] = 0;\n      M[7] = 0;\n      M[11] = 0;\n      M[15] = 1;\n    } else if (x_axis === 0 && y_axis !== 0 && z_axis === 0) {\n      // Rotation around Y axis\n      if (y_axis < 0) {\n        s = -s;\n      }\n\n      M[0] = c;\n      M[4] = 0;\n      M[8] = s;\n      M[12] = 0;\n      M[1] = 0;\n      M[5] = 1;\n      M[9] = 0;\n      M[13] = 0;\n      M[2] = -s;\n      M[6] = 0;\n      M[10] = c;\n      M[14] = 0;\n      M[3] = 0;\n      M[7] = 0;\n      M[11] = 0;\n      M[15] = 1;\n    } else if (x_axis === 0 && y_axis === 0 && z_axis !== 0) {\n      // Rotation around Z axis\n      if (z_axis < 0) {\n        s = -s;\n      }\n\n      M[0] = c;\n      M[4] = -s;\n      M[8] = 0;\n      M[12] = 0;\n      M[1] = s;\n      M[5] = c;\n      M[9] = 0;\n      M[13] = 0;\n      M[2] = 0;\n      M[6] = 0;\n      M[10] = 1;\n      M[14] = 0;\n      M[3] = 0;\n      M[7] = 0;\n      M[11] = 0;\n      M[15] = 1;\n    } else {\n      // Rotation around any arbitrary axis\n      axis_of_rotation[0] = x_axis;\n      axis_of_rotation[1] = y_axis;\n      axis_of_rotation[2] = z_axis;\n      V.normalize(axis_of_rotation);\n      ux = axis_of_rotation[0];\n      uy = axis_of_rotation[1];\n      uz = axis_of_rotation[2];\n      c1 = 1 - c;\n      M[0] = c + ux * ux * c1;\n      M[1] = uy * ux * c1 + uz * s;\n      M[2] = uz * ux * c1 - uy * s;\n      M[3] = 0;\n      M[4] = ux * uy * c1 - uz * s;\n      M[5] = c + uy * uy * c1;\n      M[6] = uz * uy * c1 + ux * s;\n      M[7] = 0;\n      M[8] = ux * uz * c1 + uy * s;\n      M[9] = uy * uz * c1 - ux * s;\n      M[10] = c + uz * uz * c1;\n      M[11] = 0;\n      M[12] = 0;\n      M[13] = 0;\n      M[14] = 0;\n      M[15] = 1;\n    }\n  };\n\n  this.createOrthographic = function (left, right, bottom, top, near, far) {\n    var M = this.create(); // Make sure there is no division by zero\n\n    if (left === right || bottom === top || near === far) {\n      console.log(\"Invalid createOrthographic parameters\");\n      this.setIdentity(M);\n      return M;\n    }\n\n    var widthRatio = 1.0 / (right - left);\n    var heightRatio = 1.0 / (top - bottom);\n    var depthRatio = 1.0 / (far - near);\n    var sx = 2 * widthRatio;\n    var sy = 2 * heightRatio;\n    var sz = -2 * depthRatio;\n    var tx = -(right + left) * widthRatio;\n    var ty = -(top + bottom) * heightRatio;\n    var tz = -(far + near) * depthRatio;\n    M[0] = sx;\n    M[4] = 0;\n    M[8] = 0;\n    M[12] = tx;\n    M[1] = 0;\n    M[5] = sy;\n    M[9] = 0;\n    M[13] = ty;\n    M[2] = 0;\n    M[6] = 0;\n    M[10] = sz;\n    M[14] = tz;\n    M[3] = 0;\n    M[7] = 0;\n    M[11] = 0;\n    M[15] = 1;\n    return M;\n  };\n\n  this.createPerspective = function (fovy, aspect, near, far) {\n    var M;\n\n    if (fovy <= 0 || fovy >= 180 || aspect <= 0 || near >= far || near <= 0) {\n      console.log('Invalid parameters to createPerspective');\n      self.setIdentity(M);\n    } else {\n      var half_fovy = this.toRadians(fovy) / 2;\n      var top = near * Math.tan(half_fovy);\n      var bottom = -top;\n      var right = top * aspect;\n      var left = -right;\n      M = this.createFrustum(left, right, bottom, top, near, far);\n    }\n\n    return M;\n  };\n\n  this.createFrustum = function (left, right, bottom, top, near, far) {\n    var M = this.create(); // Make sure there is no division by zero\n\n    if (left === right || bottom === top || near === far) {\n      console.log(\"Invalid createFrustum parameters\");\n      self.setIdentity(M);\n    }\n\n    if (near <= 0 || far <= 0) {\n      console.log('For a perspective projection, the near and far distances must be positive');\n      self.setIdentity(M);\n    } else {\n      var sx = 2 * near / (right - left);\n      var sy = 2 * near / (top - bottom);\n      var c2 = -(far + near) / (far - near);\n      var c1 = 2 * near * far / (near - far);\n      var tx = -near * (left + right) / (right - left);\n      var ty = -near * (bottom + top) / (top - bottom);\n      M[0] = sx;\n      M[4] = 0;\n      M[8] = 0;\n      M[12] = tx;\n      M[1] = 0;\n      M[5] = sy;\n      M[9] = 0;\n      M[13] = ty;\n      M[2] = 0;\n      M[6] = 0;\n      M[10] = c2;\n      M[14] = c1;\n      M[3] = 0;\n      M[7] = 0;\n      M[11] = -1;\n      M[15] = 0;\n    }\n\n    return M;\n  };\n}\n\nvar point4 = new Point4();\nvar vec3 = new Vector3();\nvar mat4 = new Matrix4();\n\n//# sourceURL=webpack:///./src/js/matrix_math.js?");

/***/ }),

/***/ "./src/js/mesh.js":
/*!************************!*\
  !*** ./src/js/mesh.js ***!
  \************************/
/*! exports provided: Mesh */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Mesh\", function() { return Mesh; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./src/js/utils.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar Mesh = /*#__PURE__*/function () {\n  function Mesh(geometry, material, shade_mode) {\n    _classCallCheck(this, Mesh);\n\n    this.type = \"Mesh\";\n    this.material = material;\n    this.shade_mode = shade_mode;\n    this.draw_points = false;\n    this.draw_lines = false;\n    this.draw_triangles = true; // SubObjects of a mesh:\n\n    this.Points = {\n      vertices: this._buidVertexAttributeArray(geometry.points, 1),\n      color: [0, 0, 0, 1],\n      size: 2\n    };\n    this.Lines = {\n      vertices: this._buidVertexAttributeArray(geometry.lines, 2),\n      color: [1, 1, 1, 1]\n    };\n    this.Triangles = {\n      vertices: this._buidVertexAttributeArray(geometry.triangles, 3),\n      colors: this._buidColorAttributeArray(geometry.triangles, material.base_color),\n      flat_normals: this._buidVertexAttributeArray(geometry.flat_normals, 1),\n      smooth_normals: this._buidVertexAttributeArray(geometry.smooth_normals, 1)\n    }; // Vertex buffer array is interleaved array of attributes data and use when render triangles\n\n    this.vertex_buffer_array = null; // Bind when draw triangles\n\n    this.vertex_buffer_array_flat = null;\n    this.vertex_buffer_array_smooth = null; // Point buffer array is 1D array of position attribute, don't need to be interleaved since\n    // points is render with uniform\n\n    this.point_buffer_array = this.Points.vertices; // Bind when draw points\n    // Line buffer array is 1D array of position attribute, don't need to be interleaved since\n    // lines is render with uniform\n\n    this.line_buffer_array = this.Lines.vertices; // Bind when draw lines\n    // Basic transformmation:\n\n    this.scale = {\n      x: 1,\n      y: 1,\n      z: 1\n    };\n    this.translate = {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n    this.rotate = {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n  }\n  /** @_buidVertexAttributeArray\r\n  * Building a 1D array of vertices position base on primitives data: TRIANGLES, LINES, ....\r\n  * @param primitives The primitives data of the mesh, can be triangles or lines.\r\n  * @param n number vertices of each primitive, 2 with lines 3 with triangles, 4 with quad ,.....\r\n  * @returns A 1D array contains vertex position data.\r\n  * @private\r\n  */\n\n\n  _createClass(Mesh, [{\n    key: \"_buidVertexAttributeArray\",\n    value: function _buidVertexAttributeArray(primitives, n) {\n      var vertices = new Float32Array(primitives.length * n * 3);\n      var nv = 0;\n\n      if (n == 1) {\n        for (var i = 0; i < primitives.length; i++) {\n          var point = primitives[i];\n\n          for (var j = 0; j < point.length; j++, nv++) {\n            vertices[nv] = point[j];\n          }\n        }\n      } else {\n        for (var _i = 0; _i < primitives.length; _i++) {\n          var primitive = primitives[_i];\n\n          for (var _j = 0; _j < primitive.length; _j++) {\n            var vertex = primitive[_j];\n\n            for (var k = 0; k < vertex.length; k++, nv++) {\n              vertices[nv] = vertex[k];\n            }\n          }\n        }\n      }\n\n      return vertices;\n    }\n    /** @_buidColorAttributeArray\r\n    * Building a 1D array of color data position base on triangles data.\r\n    * @param triangles The triangles data of the mesh.\r\n    * @param base_color Array of color define by the material.\r\n    * @returns A 1D array contains color data for each vertex.\r\n    * @private\r\n    */\n\n  }, {\n    key: \"_buidColorAttributeArray\",\n    value: function _buidColorAttributeArray(triangles, base_color) {\n      var colors_array = new Float32Array(triangles.length * 9);\n      var cc = 0;\n\n      for (var i = 0; i < triangles.length; i++) {\n        var triangle = triangles[i];\n\n        for (var j = 0; j < triangle.length; j++) {\n          var color = base_color;\n\n          for (var k = 0; k < color.length; k++, cc++) {\n            colors_array[cc] = color[k];\n          }\n        }\n      }\n\n      return colors_array;\n    }\n  }]);\n\n  return Mesh;\n}();\n\n//# sourceURL=webpack:///./src/js/mesh.js?");

/***/ }),

/***/ "./src/js/renderer.js":
/*!****************************!*\
  !*** ./src/js/renderer.js ***!
  \****************************/
/*! exports provided: RenderEngine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RenderEngine\", function() { return RenderEngine; });\n/* harmony import */ var _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./matrix_math.js */ \"./src/js/matrix_math.js\");\n/* harmony import */ var _shaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shaders.js */ \"./src/js/shaders.js\");\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar RenderEngine = /*#__PURE__*/function () {\n  function RenderEngine(canvas) {\n    _classCallCheck(this, RenderEngine);\n\n    this._gl = canvas.getContext(\"webgl\");\n    this.wireFrame_shader = {\n      vShader: this._loadAndCompileShaders(this._gl.VERTEX_SHADER, _shaders_js__WEBPACK_IMPORTED_MODULE_1__[\"WIRE_FRAME_SHADER\"].VERT),\n      fShader: this._loadAndCompileShaders(this._gl.FRAGMENT_SHADER, _shaders_js__WEBPACK_IMPORTED_MODULE_1__[\"WIRE_FRAME_SHADER\"].FRAG)\n    };\n    this.basic_shader = {\n      vShader: this._loadAndCompileShaders(this._gl.VERTEX_SHADER, _shaders_js__WEBPACK_IMPORTED_MODULE_1__[\"BASIC_SHADER\"].VERT),\n      fShader: this._loadAndCompileShaders(this._gl.FRAGMENT_SHADER, _shaders_js__WEBPACK_IMPORTED_MODULE_1__[\"BASIC_SHADER\"].FRAG)\n    };\n    this.basic_lighting_shader = {\n      vShader: this._loadAndCompileShaders(this._gl.VERTEX_SHADER, _shaders_js__WEBPACK_IMPORTED_MODULE_1__[\"BASIC_LIGHTING_SHADER\"].VERT),\n      fShader: this._loadAndCompileShaders(this._gl.FRAGMENT_SHADER, _shaders_js__WEBPACK_IMPORTED_MODULE_1__[\"BASIC_LIGHTING_SHADER\"].FRAG)\n    };\n    this.buffer_id = this._gl.createBuffer();\n    this.wireFrame_program = this._createProgram(this.wireFrame_shader.vShader, this.wireFrame_shader.fShader);\n    this.basic_program = this._createProgram(this.basic_shader.vShader, this.basic_shader.fShader);\n    this.basic_lighting_program = this._createProgram(this.basic_lighting_shader.vShader, this.basic_lighting_shader.fShader);\n  }\n  /** @_loadAndCompileShaders\r\n  * Load and compile Shader\r\n  * @param type WebGL constant gl.VERTEX_SHADER or gl.FRAGMENT_SHADER\r\n  * @param source a string contains GLSL code.\r\n  * @returns A 1D array contains interleaved attribute data.\r\n  * @private\r\n  */\n\n\n  _createClass(RenderEngine, [{\n    key: \"_loadAndCompileShaders\",\n    value: function _loadAndCompileShaders(type, source) {\n      var gl = this._gl;\n      var shader = null;\n\n      switch (type) {\n        case gl.VERTEX_SHADER:\n          shader = gl.createShader(gl.VERTEX_SHADER);\n          gl.shaderSource(shader, source);\n          gl.compileShader(shader);\n          break;\n\n        case gl.FRAGMENT_SHADER:\n          shader = gl.createShader(gl.FRAGMENT_SHADER);\n          gl.shaderSource(shader, source);\n          gl.compileShader(shader);\n          break;\n\n        default:\n          break;\n      }\n\n      return shader;\n    }\n    /** @_createProgram\r\n    * Load and compile Shader\r\n    * @param vertexShader WebGL vertex shader\r\n    * @param fragmentShader WebGL fragment shader\r\n    * @returns A WebGL program using the 2 shader.\r\n    * @private\r\n    */\n\n  }, {\n    key: \"_createProgram\",\n    value: function _createProgram(vertexShader, fragmentShader) {\n      var gl = this._gl;\n      var program = gl.createProgram();\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      return program;\n    }\n  }, {\n    key: \"_setProgramAttribute\",\n    value: function _setProgramAttribute(program, attrib_list, data_length_list) {\n      var gl = this._gl;\n      var stride = 0;\n      var offset = [];\n\n      for (var i = 0; i < data_length_list.length; i++) {\n        stride += data_length_list[i] * 4;\n      }\n\n      for (var _i = 0; _i < attrib_list.length; _i++) {\n        if (_i == 0) offset = 0;else offset += data_length_list[_i - 1] * 4;\n        var attrib_name = attrib_list[_i];\n        var data_length = data_length_list[_i];\n        program[attrib_name] = gl.getAttribLocation(program, attrib_name);\n        gl.enableVertexAttribArray(program[attrib_name]);\n        gl.vertexAttribPointer(program[attrib_name], data_length, gl.FLOAT, false, stride, offset);\n      }\n    }\n  }, {\n    key: \"_setProgramUniform\",\n    value: function _setProgramUniform(program, uniform_name, data, type) {\n      var gl = this._gl;\n      program[uniform_name] = gl.getUniformLocation(program, uniform_name);\n\n      switch (type) {\n        case UNIFORM_FLOAT:\n          gl.uniform1f(program[uniform_name], data);\n          break;\n\n        case UNIFORM_INT:\n          gl.uniform1i(program[uniform_name], data);\n          break;\n\n        case UNIFORM_FVEC1:\n          gl.uniform1fv(program[uniform_name], data);\n          break;\n\n        case UNIFORM_FVEC3:\n          gl.uniform3fv(program[uniform_name], data);\n          break;\n\n        case UNIFORM_FVEC4:\n          gl.uniform4fv(program[uniform_name], data);\n          break;\n\n        case UNIFORM_FMATX4:\n          gl.uniformMatrix4fv(program[uniform_name], false, data);\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"_transformObject\",\n    value: function _transformObject(object) {\n      var translate_matrix = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].create();\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].translate(translate_matrix, object.translate.x, object.translate.y, object.translate.z);\n      var scale_matrix = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].create();\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].scale(scale_matrix, object.scale.x, object.scale.y, object.scale.z);\n      var rotateX_matrix = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].create();\n      var rotateY_matrix = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].create();\n      var rotateZ_matrix = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].create();\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].rotate(rotateX_matrix, object.rotate.x, 1, 0, 0);\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].rotate(rotateY_matrix, object.rotate.y, 0, 1, 0);\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].rotate(rotateZ_matrix, object.rotate.z, 0, 0, 1);\n      var transform_matrix = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].create();\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].multiplySeries(transform_matrix, translate_matrix, scale_matrix, rotateX_matrix, rotateY_matrix, rotateZ_matrix);\n      return transform_matrix;\n    }\n  }, {\n    key: \"render\",\n    value: function render(scene, camera) {\n      var gl = this._gl;\n      gl.enable(gl.DEPTH_TEST);\n      gl.clearColor(scene.color[0], scene.color[1], scene.color[2], scene.color[3]);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n\n      var _iterator = _createForOfIteratorHelper(scene.objects),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var obj = _step.value;\n\n          this._drawTriangles(obj, camera, scene, obj.draw_triangles);\n\n          this._drawWireFrame(obj, camera, obj.draw_points, obj.draw_lines);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"_drawTriangles\",\n    value: function _drawTriangles(obj, camera, scene, draw_triangles) {\n      if (draw_triangles == true) {\n        var gl = this._gl;\n        var gl_program;\n        var attrib_list, data_length_list;\n        var buffer_array;\n        var ambient_color, ambient_intensity;\n        var point_lights_position = [];\n        var point_lights_color = [];\n        var point_lights_intensity = [];\n        var pvm_transform = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].create();\n        var vm_transform = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].create();\n\n        var model_matrix = this._transformObject(obj);\n\n        var projection_matrix = camera.projection;\n        var view_matrix = camera.transform;\n        _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].multiplySeries(pvm_transform, projection_matrix, view_matrix, model_matrix);\n        _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].multiplySeries(vm_transform, view_matrix, model_matrix);\n\n        var _iterator2 = _createForOfIteratorHelper(scene.point_lights),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var point_light = _step2.value;\n            point_lights_position.push(point_light.position.x);\n            point_lights_position.push(point_light.position.y);\n            point_lights_position.push(point_light.position.z);\n            point_lights_color.push(point_light.color[0]);\n            point_lights_color.push(point_light.color[1]);\n            point_lights_color.push(point_light.color[2]);\n            point_lights_intensity.push(point_light.intensity);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        if (scene.ambient_light) {\n          ambient_color = [scene.ambient_light.color.r, scene.ambient_light.color.g, scene.ambient_light.color.b];\n          ambient_intensity = scene.ambient_light.intensity;\n        } else {\n          ambient_color = [0, 0, 0];\n          ambient_intensity = 0;\n        } // If there is light in the scene\n\n\n        if (scene.point_lights.length > 0 || scene.spot_lights.length > 0 || scene.area_lights.length > 0 || scene.sun_lights.length > 0) {\n          // Shade flat mode rendering\n          if (obj.shade_mode == SHADE_FLAT) {\n            gl_program = this.basic_lighting_program;\n            buffer_array = obj.vertex_buffer_array_flat;\n            attrib_list = [\"a_Vertex_position\", \"a_Color\", \"a_Vertex_normal\"];\n            data_length_list = [3, 3, 3];\n          } // Shade smooth mode rendering\n          else if (obj.shade_mode == SHADE_SMOOTH) {\n              gl_program = this.basic_lighting_program;\n              buffer_array = obj.vertex_buffer_array_smooth;\n              attrib_list = [\"a_Vertex_position\", \"a_Color\", \"a_Vertex_normal\"];\n              data_length_list = [3, 3, 3];\n            }\n\n          gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer_id);\n          gl.bufferData(gl.ARRAY_BUFFER, buffer_array, gl.STATIC_DRAW);\n          gl.useProgram(gl_program);\n\n          this._setProgramAttribute(gl_program, attrib_list, data_length_list);\n\n          this._setProgramUniform(gl_program, \"u_VM_transform\", vm_transform, UNIFORM_FMATX4);\n\n          this._setProgramUniform(gl_program, \"u_PVM_transform\", pvm_transform, UNIFORM_FMATX4);\n\n          this._setProgramUniform(gl_program, \"u_Light_position\", point_lights_position, UNIFORM_FVEC3);\n\n          this._setProgramUniform(gl_program, \"u_Light_color\", point_lights_color, UNIFORM_FVEC3);\n\n          this._setProgramUniform(gl_program, \"u_Light_intensity\", point_lights_intensity, UNIFORM_FVEC1);\n\n          this._setProgramUniform(gl_program, \"u_Ambient_color\", ambient_color, UNIFORM_FVEC3);\n\n          this._setProgramUniform(gl_program, \"u_Ambient_intensity\", ambient_intensity, UNIFORM_FLOAT);\n        } // If there is no light in the scene\n        else {\n            gl_program = this.basic_program;\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer_id);\n            gl.bufferData(gl.ARRAY_BUFFER, obj.vertex_buffer_array, gl.STATIC_DRAW);\n            gl.useProgram(gl_program);\n            var _attrib_list = [\"a_Vertex_position\", \"a_Color\"];\n            var _data_length_list = [3, 3];\n\n            this._setProgramAttribute(gl_program, _attrib_list, _data_length_list);\n\n            this._setProgramUniform(gl_program, \"u_VM_transform\", vm_transform, UNIFORM_FMATX4);\n\n            this._setProgramUniform(gl_program, \"u_PVM_transform\", pvm_transform, UNIFORM_FMATX4);\n          }\n\n        gl.drawArrays(gl.TRIANGLES, 0, obj.Triangles.vertices.length / 3);\n      }\n    }\n  }, {\n    key: \"_drawWireFrame\",\n    value: function _drawWireFrame(obj, camera, draw_points, draw_lines) {\n      var gl = this._gl;\n      var gl_program = this.wireFrame_program;\n      var buffer_array, color;\n      var pvm_transform = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].create();\n\n      var model_matrix = this._transformObject(obj);\n\n      var projection_matrix = camera.projection;\n      var view_matrix = camera.transform;\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].multiplySeries(pvm_transform, projection_matrix, view_matrix, model_matrix);\n\n      if (draw_points == true) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer_id);\n        gl.bufferData(gl.ARRAY_BUFFER, obj.point_buffer_array, gl.STATIC_DRAW);\n        gl.useProgram(gl_program);\n\n        this._setProgramAttribute(gl_program, [\"a_Vertex_position\"], [3]); // Set program uniform:\n\n\n        this._setProgramUniform(gl_program, \"u_PVM_transform\", pvm_transform, \"mat4\");\n\n        this._setProgramUniform(gl_program, \"u_Color\", obj.Points.color, \"vec4\");\n\n        gl.drawArrays(gl.POINTS, 0, obj.Points.vertices.length / 3);\n      }\n\n      if (draw_lines == true) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer_id);\n        gl.bufferData(gl.ARRAY_BUFFER, obj.line_buffer_array, gl.STATIC_DRAW);\n        gl.useProgram(gl_program);\n\n        this._setProgramAttribute(gl_program, [\"a_Vertex_position\"], [3]); // Set program uniform:\n\n\n        this._setProgramUniform(gl_program, \"u_PVM_transform\", pvm_transform, \"mat4\");\n\n        this._setProgramUniform(gl_program, \"u_Color\", obj.Lines.color, \"vec4\");\n\n        gl.drawArrays(gl.LINES, 0, obj.Lines.vertices.length / 3);\n      }\n    }\n  }]);\n\n  return RenderEngine;\n}();\n\n//# sourceURL=webpack:///./src/js/renderer.js?");

/***/ }),

/***/ "./src/js/scene.js":
/*!*************************!*\
  !*** ./src/js/scene.js ***!
  \*************************/
/*! exports provided: Scene */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Scene\", function() { return Scene; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Scene = /*#__PURE__*/function () {\n  function Scene(color) {\n    _classCallCheck(this, Scene);\n\n    if (color) {\n      this.color = color;\n    } else {\n      this.color = [1, 1, 1, 1];\n    }\n\n    this.objects = [];\n    this.ambient_light = null;\n    this.point_lights = [];\n    this.spot_lights = [];\n    this.area_lights = [];\n    this.sun_lights = [];\n  }\n\n  _createClass(Scene, [{\n    key: \"add\",\n    value: function add(object) {\n      if (object.type == \"Mesh\") {\n        object.vertex_buffer_array = this._buildInterleavedAtrribArray(object.Triangles.vertices.length / 3, [object.Triangles.vertices, object.Triangles.colors], [3, 3]);\n        object.vertex_buffer_array_flat = this._buildInterleavedAtrribArray(object.Triangles.vertices.length / 3, [object.Triangles.vertices, object.Triangles.colors, object.Triangles.flat_normals], [3, 3, 3]);\n        object.vertex_buffer_array_smooth = this._buildInterleavedAtrribArray(object.Triangles.vertices.length / 3, [object.Triangles.vertices, object.Triangles.colors, object.Triangles.smooth_normals], [3, 3, 3]);\n        this.objects.push(object);\n      } else if (object.type == \"PointLight\") {\n        this.point_lights.push(object);\n      } else if (object.type == \"AmbientLight\") {\n        this.ambient_light = object;\n      }\n    }\n  }, {\n    key: \"_buildInterleavedAtrribArray\",\n\n    /** @_buildInterleavedArray\r\n    * Building a 1D array contains interleaved attribute data: position, color, texture, normals, ....\r\n    * @param num_vertex The number of total vertices of the mesh: length(vertices_buffer) / 3.\r\n    * @param buffer_arrays an array of attribute arrays\r\n    * @param data_length_array an array of the length of attribute arrays - need to set value in the right orders of @buffer_arrays\r\n    * @returns A 1D array contains interleaved attribute data.\r\n    * @private\r\n    */\n    value: function _buildInterleavedAtrribArray(num_vertex, buffer_arrays, data_length_array) {\n      var total_length = 0;\n      var i, j, k;\n      var fi = 0;\n\n      for (var _i = 0; _i < buffer_arrays.length; _i++) {\n        total_length += buffer_arrays[_i].length;\n      }\n\n      var interleaved_array = new Float32Array(total_length);\n\n      for (i = 0; i < num_vertex; i++) {\n        for (j = 0; j < buffer_arrays.length; j++) {\n          for (k = 0; k < data_length_array[j]; k++) {\n            interleaved_array[fi++] = buffer_arrays[j][i * data_length_array[j] + k];\n          }\n        }\n      }\n\n      return interleaved_array;\n    }\n  }]);\n\n  return Scene;\n}();\n\n//# sourceURL=webpack:///./src/js/scene.js?");

/***/ }),

/***/ "./src/js/shaders.js":
/*!***************************!*\
  !*** ./src/js/shaders.js ***!
  \***************************/
/*! exports provided: WIRE_FRAME_SHADER, BASIC_SHADER, BASIC_LIGHTING_SHADER */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WIRE_FRAME_SHADER\", function() { return WIRE_FRAME_SHADER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BASIC_SHADER\", function() { return BASIC_SHADER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BASIC_LIGHTING_SHADER\", function() { return BASIC_LIGHTING_SHADER; });\nvar WIRE_FRAME_SHADER = {\n  VERT: \"\\n        precision mediump float;\\n\\n        attribute vec3 a_Vertex_position;\\n        uniform mat4 u_PVM_transform;\\n\\n        void main() {\\n            gl_PointSize = 5.0;\\n            gl_Position = u_PVM_transform * vec4( a_Vertex_position, 1.0);\\n        }\\n    \",\n  FRAG: \"\\n        precision mediump float;\\n\\n        uniform vec4 u_Color;\\n\\n        void main() {\\n            gl_FragColor = u_Color;\\n        }\\n    \"\n};\nvar BASIC_SHADER = {\n  VERT: \"\\n        precision mediump float;\\n        attribute vec3 a_Vertex_position;\\n        attribute vec3 a_Color;\\n\\n        uniform mat4 u_PVM_transform;\\n\\n        varying vec3 v_Color;\\n        void main() {\\n            v_Color = a_Color;\\n            gl_Position = u_PVM_transform * vec4( a_Vertex_position, 1.0);\\n        }\\n    \",\n  FRAG: \"\\n        precision mediump float;\\n\\n        varying vec3 v_Color;\\n\\n        void main() {\\n            gl_FragColor = vec4(v_Color, 1.0);\\n        }\\n    \"\n};\nvar BASIC_LIGHTING_SHADER = {\n  VERT: \"\\n        // Vertex Shader\\n        precision mediump float;\\n        \\n        // Scene transformations\\n        uniform mat4 u_PVM_transform; // Projection, view, model transform\\n        uniform mat4 u_VM_transform; // View, model transform\\n        \\n        // Original model data\\n        attribute vec3 a_Vertex_position;\\n        attribute vec3 a_Color;\\n        attribute vec3 a_Vertex_normal;\\n        \\n        // Data (to be interpolated) that is passed on to the fragment shader\\n        varying vec3 v_Vertex_position;\\n        varying vec4 v_Color;\\n        varying vec3 v_Vertex_normal;\\n        \\n        void main() {\\n\\n            v_Vertex_normal = vec3(u_VM_transform * vec4(a_Vertex_normal, 0.0));\\n            v_Vertex_position = vec3(u_VM_transform * vec4(a_Vertex_position, 1.0)); //Location of vertices infront the camera\\n            v_Color = vec4(a_Color, 1.0);\\n\\n            gl_Position = u_PVM_transform * vec4(a_Vertex_position, 1.0); //Location of vertices project on the screen\\n        }\\n    \",\n  FRAG: \"\\n        // Fragment shader program\\n        precision mediump float;\\n\\n        // Light information\\n        uniform vec3 u_Light_position; // Position of point light\\n        uniform vec3 u_Light_color; // Point light color\\n        uniform float u_Light_intensity;\\n\\n        uniform vec3 u_Ambient_color;\\n        uniform float u_Ambient_intensity;\\n\\n        // Data passed from the vertex shader:\\n        varying vec4 v_Color;\\n        varying vec3 v_Vertex_position;\\n        varying vec3 v_Vertex_normal;\\n        \\n        void main() {\\n            vec3 color;\\n            vec3 diffuse_color;\\n            vec3 specular_color;\\n            vec3 ambient_color;\\n            vec3 reflection;\\n            vec3 to_camera;\\n            vec3 to_light;\\n            vec3 vertex_normal;\\n            float cos_angle_diffuse;\\n            float cos_angle_specular;\\n            float attenuation;\\n            float d;\\n\\n            // =========== CALCULATING AMBIENT LIGHT COLOR ============//\\n            ambient_color = u_Ambient_color * vec3(v_Color) * u_Ambient_intensity;\\n            // =========== CALCULATING DIFFUSE LIGHT COLOR ============//\\n            to_light = normalize(u_Light_position - v_Vertex_position);\\n\\n            vertex_normal = normalize(v_Vertex_normal); // Normalize after interpolated\\n            cos_angle_diffuse = dot(to_light, vertex_normal); // Dot product of the 2 above unit vector\\n            cos_angle_diffuse = clamp(cos_angle_diffuse, 0., 1.); //  Limit the value in positive range\\n\\n            diffuse_color = vec3(v_Color) * cos_angle_diffuse * u_Light_intensity;\\n            // =========== CALCULATING SPECULAR REFLECTION COLOR ============//\\n            reflection = 2.0 * dot(vertex_normal, to_light) * vertex_normal - to_light;\\n\\n            to_camera = normalize(-1.0 * v_Vertex_position);\\n\\n            cos_angle_specular = dot(reflection, to_camera); // Dot product of the 2 above unit vector\\n            cos_angle_specular = clamp(cos_angle_specular, 0., 1.); //  Limit the value in positive range\\n            cos_angle_specular = pow(cos_angle_specular, 128.); // Power by some shininess\\n\\n            if (cos_angle_specular > 0.0) {\\n                specular_color = u_Light_color * cos_angle_specular;\\n                diffuse_color = diffuse_color * (1.0 - cos_angle_specular);\\n            } else {\\n                specular_color = vec3(0.0, 0.0, 0.0);\\n            }\\n            // =========== CALCULATING LIGHT ATTENUATION ============//\\n            d = length(u_Light_position - v_Vertex_position); // Distance from light source to object\\n            attenuation = 5.0 / (1.0 + 0.1*d + 0.01*d*d);\\n            attenuation = clamp(attenuation, 0.0, 1.0);\\n            // =========== ADD COLOR ============//\\n            color = (diffuse_color + specular_color + ambient_color) * attenuation;            \\n            gl_FragColor = vec4(color, 1.0);\\n        }\\n    \"\n};\n\n//# sourceURL=webpack:///./src/js/shaders.js?");

/***/ }),

/***/ "./src/js/utils.js":
/*!*************************!*\
  !*** ./src/js/utils.js ***!
  \*************************/
/*! exports provided: createTriangle, createLine, buildFlatNormal, buildSmoothNormal, randomInt */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createTriangle\", function() { return createTriangle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createLine\", function() { return createLine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildFlatNormal\", function() { return buildFlatNormal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildSmoothNormal\", function() { return buildSmoothNormal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randomInt\", function() { return randomInt; });\n/* harmony import */ var _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./matrix_math.js */ \"./src/js/matrix_math.js\");\n\nvar createTriangle = function createTriangle(a, b, c) {\n  var T = [a, b, c];\n  return T;\n};\nvar createLine = function createLine(a, b) {\n  var L = [a, b];\n  return L;\n};\nvar buildFlatNormal = function buildFlatNormal(triangles) {\n  var flat_normals = [];\n  var normal = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].create();\n\n  for (var i = 0; i < triangles.length; i++) {\n    var triangle = triangles[i];\n    var a = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"point4\"].create(triangle[0][0], triangle[0][1], triangle[0][2]);\n    var b = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"point4\"].create(triangle[1][0], triangle[1][1], triangle[1][2]);\n    var c = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"point4\"].create(triangle[2][0], triangle[2][1], triangle[2][2]);\n    var v0 = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].createFrom2Points(a, b);\n    var v1 = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].createFrom2Points(b, c);\n    _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].crossProduct(normal, v0, v1);\n    _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].normalize(normal);\n\n    for (var j = 0; j < 3; j++) {\n      flat_normals.push([normal[0], normal[1], normal[2]]); // Every vertices in one triangle has the triangle normal\n    }\n  }\n\n  return flat_normals;\n};\nvar buildSmoothNormal = function buildSmoothNormal(triangles) {\n  var smooth_normals = [];\n  var normal = _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].create();\n\n  for (var i = 0; i < triangles.length; i++) {\n    var triangle = triangles[i];\n\n    for (var j = 0; j < triangle.length; j++) {\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].set(normal, triangle[j][0], triangle[j][1], triangle[j][2]);\n      _matrix_math_js__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].normalize(normal);\n      smooth_normals.push([normal[0], normal[1], normal[2]]);\n    }\n  }\n\n  return smooth_normals;\n};\nvar randomInt = function randomInt(min, max) {\n  return min + Math.floor((max - min) * Math.random());\n};\n\n//# sourceURL=webpack:///./src/js/utils.js?");

/***/ })

/******/ });